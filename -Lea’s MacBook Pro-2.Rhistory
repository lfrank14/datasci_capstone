rowwise() %>%
mutate(df = list(getData(ssid, timing, roi)))
## Create Folds
#===============
conds <- conds %>%
rowwise() %>%
mutate(folds = list(cvfold(df,
fold_by = "run",
dv = "remembered")))
tictoc::tic()
conds <- conds %>%
rowwise() %>%
mutate(output = list(runCV(folds = folds)),
nremembered = sum(df$remembered==1)/2,
nforgotten = sum(df$remembered==0)/2) %>%
suppressWarnings()
tictoc::toc()
## Save All Results
#===================
saveRDS(conds,
"models/decodeMem.rds")
## Format and Save Metrics Only
#===============================
results <- conds %>%
select(ssid, timing, roi, nremembered, nforgotten, output) %>%
unnest(output)
saveRDS(results,
"models/decodeMem_results.rds")
library(flexdashboard)
library(tidyverse)
## load data
cat <- rio::import("models/decodeCat_results.rds")
mem <- rio::import("models/decodeMem_results.rds") %>%
mutate(subClass = fct_recode(subClass,
remembered = "class2",
forgotten = "class1"))
library(flexdashboard)
library(tidyverse)
## load data
cat <- rio::import("models/decodeCat_results.rds")
mem <- rio::import("models/decodeMem_results.rds") %>%
mutate(subClass = fct_recode(subClass,
remembered = "class2",
forgotten = "class1"))
# average decoding accuracy
mvpa_avg <- cat %>%
mutate(ratio = fct_relevel(ratio, ".5:.5", after = 2),
roi = fct_relevel(roi, c("lo","pfus","ipar"))) %>%
group_by(ratio, timing, roi) %>%
summarize(m_acc = mean(acc),
se_acc = lurr::se(acc),
.groups = "keep")
# plot decoding accuracy for each condition
mvpa_avg %>%
ggplot(aes(x = ratio, y = m_acc, color = timing)) +
geom_pointrange(aes(ymin = m_acc-se_acc, ymax = m_acc+se_acc)) +
geom_line(aes(group = timing)) +
facet_wrap(~roi)
# get average hit and false alarm rates
mvpa_avg2 <- cat %>%
filter(ratio != ".5:.5") %>%
mutate(roi = fct_relevel(roi, c("lo","pfus","ipar"))) %>%
group_by(ratio, timing, roi, subClass) %>%
summarize(mhit_class1 = mean(hit_class1),
sehit_class1 = lurr::se(hit_class1),
mhit_class2 = mean(hit_class2),
sehit_class2 = lurr::se(hit_class2),
mfa_class1 = mean(fa_class1),
sefa_class1 = lurr::se(fa_class1),
mfa_class2 = mean(fa_class2),
sefa_class2 = lurr::se(fa_class2),
.groups = "keep") %>%
pivot_longer(cols = c(5:12),
names_to = c("measure","prediction"),
names_sep = c("_"),
values_to = "tmp") %>%
pivot_wider(names_from = "measure",
values_from = "tmp") %>%
mutate(prediction = ifelse(prediction=="class1",
"animal","tool"),
subClass = ifelse(subClass=="class1", "animal",
ifelse(subClass=="class2",
"tool", "none")))
# plot false alarm rates for lateral occipital cortex
mvpa_avg2 %>%
filter(timing == "quick4n") %>%
ggplot(aes(x = subClass, y = mfa, fill = prediction)) +
geom_bar(stat = "identity",
position = position_dodge(width = 1)) +
geom_errorbar(aes(ymin = mfa-sefa, ymax = mfa+sefa),
width = .2,
position = position_dodge(width = 1)) +
facet_wrap(roi~ratio, nrow = 3)
# plot false alarm rates for posterior fusiform cortex
mvpa_avg2 %>%
filter(timing == "quick6") %>%
ggplot(aes(x = subClass, y = mfa, fill = prediction)) +
geom_bar(stat = "identity",
position = position_dodge(width = 1)) +
geom_errorbar(aes(ymin = mfa-sefa, ymax = mfa+sefa),
width = .2,
position = position_dodge(width = 1)) +
facet_wrap(roi~ratio, nrow = 3)
# plot false alarm rates for inferior parietal cortex
mvpa_avg2 %>%
filter(timing == "slow12") %>%
ggplot(aes(x = subClass, y = mfa, fill = prediction)) +
geom_bar(stat = "identity",
position = position_dodge(width = 1)) +
geom_errorbar(aes(ymin = mfa-sefa, ymax = mfa+sefa),
width = .2,
position = position_dodge(width = 1)) +
facet_wrap(roi~ratio, nrow = 3)
mem %>%
ggplot(aes(x = nremembered)) +
geom_histogram() +
facet_wrap(timing ~ roi)
mem %>%
ggplot(aes(x = nremembered, y = acc, color = timing)) +
geom_point(position = "jitter", alpha = .5) +
geom_smooth(method = "lm") +
facet_wrap(~roi)
View(mem)
mem %>%
pivot_longer(cols = c(fa_class1, fa_class2),
names_to = "prediction",
values_to = "fa_rate") %>%
mutate(prediction = fct_recode(prediction,
forgotten = "fa_class1",
remembered = "fa_class2")) %>%
ggplot(aes(x = nremembered, y = fa_rate, color = prediction)) +
geom_point(size = .75, position = "jitter", alpha = .5) +
geom_smooth(method = "lm", size = .75) +
facet_wrap(timing ~ roi)
?e1071::svm
??e1071
mem_sum <- mem %>%
filter(!is.na(subClass)) %>%
pivot_longer(cols = c(hit_class1, hit_class2,
fa_class1, fa_class2),
names_to = c("type","prediction"),
names_sep = "_",
values_to = "rate") %>%
mutate(prediction = fct_recode(prediction,
forgotten = "class1",
remembered = "class2")) %>%
group_by(subClass, type, prediction) %>%
summarize(mean = mean(rate, na.rm = TRUE),
se = lurrdatviz::se(rate, na.rm = TRUE),
.groups = "keep")
mem_sum %>%
ggplot(aes(x = type, y = mean, fill = prediction)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se),
width = .25, position = position_dodge(width = .9)) +
facet_wrap(~subClass)
View(mem)
library(flexdashboard)
library(tidyverse)
library(lurr)
## load data
cat <- rio::import("models/decodeCat_results.rds")
mem <- rio::import("models/decodeMem_results.rds") %>%
mutate(subClass = fct_recode(subClass,
remembered = "class2",
forgotten = "class1"))
mem <- rio::import("models/decodeMem_results.rds") %>%
mutate(subClass = fct_recode(subClass,
remembered = "class2",
forgotten = "class1"))
catw <- rio::import("models/decodeWCat_results.rds")
# Calculating the average decoding accuracy for each condition
cat_acc <- cat %>%
mutate(ratio = fct_relevel(ratio, ".5:.5", after = 2),
roi = fct_relevel(roi, c("lo","pfus","ipar"))) %>%
group_by(ratio, timing, roi) %>%
summarize(m_acc = mean(acc),
se_acc = se(acc),
.groups = "keep")
# Calculating the decoding accuracy across all ROIs
cat_acc_avg <- cat_acc %>%
group_by(ratio, timing) %>%
summarize(gm_acc = mean(m_acc),
se_acc = se(m_acc),
.groups = "keep")
# calculating the mean hit and fa rate for each subclass
cat_sub <- cat %>%
filter(subClass != "none") %>%
mutate(hit_sm = ifelse(subClass=="class1",
hit_class1, hit_class2),
hit_lg = ifelse(subClass=="class1",
hit_class2, hit_class1),
fa_sm = ifelse(subClass=="class1",
fa_class1, fa_class2),
fa_lg = ifelse(subClass=="class1",
fa_class2, fa_class1)) %>%
pivot_longer(cols = c(11:14),
names_to = c("resp_type","class_size"),
names_sep = "_",
values_to = "rate")
View(cat_sub)
cat_sub_avg <- cat_sub %>%
group_by(ratio, timing, roi) %>%
summarize(m_rate = mean(rate),
se_rate = se(rate))
cat_sub_avg <- cat_sub %>%
group_by(ratio, timing, roi) %>%
summarize(m_rate = mean(rate),
se_rate = se(rate),
.groups = "keep")
View(cat_sub_avg)
cat_sub_avg <- cat_sub %>%
group_by(ratio, timing, roi, resp_type, class_size) %>%
summarize(m_rate = mean(rate),
se_rate = se(rate),
.groups = "keep")
View(cat_sub_avg)
cat_sub_avg %>%
ggplot(aes(x = class_size, y = m_rate, fill = resp_type)) +
geom_bar(stat = "identity",
position = position_dodge()) +
geom_linerange(aes(ymin = m_rate-se_rate, ymax = m_rate+se_rate))
cat_sub_avg %>%
ggplot(aes(x = class_size, y = m_rate, fill = resp_type)) +
geom_bar(stat = "identity",
position = position_dodge()) +
geom_linerange(aes(ymin = m_rate-se_rate, ymax = m_rate+se_rate),
position = position_dodge())
cat_sub_avg %>%
ggplot(aes(x = class_size, y = m_rate, fill = resp_type)) +
geom_bar(stat = "identity",
position = position_dodge()) +
geom_linerange(aes(ymin = m_rate-se_rate, ymax = m_rate+se_rate),
position = position_dodge(width = .2))
cat_sub_avg %>%
ggplot(aes(x = class_size, y = m_rate, fill = resp_type)) +
geom_bar(stat = "identity",
position = position_dodge()) +
geom_linerange(aes(ymin = m_rate-se_rate, ymax = m_rate+se_rate),
position = position_dodge(width = 1))
cat_sub_avg %>%
ggplot(aes(x = class_size, y = m_rate, fill = resp_type)) +
geom_bar(stat = "identity",
position = position_dodge()) +
geom_linerange(aes(ymin = m_rate-se_rate, ymax = m_rate+se_rate),
position = position_dodge(width = .9))
ggplot(aes(x = class_size, y = m_rate, fill = resp_type)) +
geom_bar(stat = "identity",
position = position_dodge()) +
geom_linerange(aes(ymin = m_rate-se_rate, ymax = m_rate+se_rate),
position = position_dodge(width = .9)) +
facet_wrap(~ratio)
ggplot(aes(x = class_size, y = m_rate, fill = resp_type)) +
geom_bar(stat = "identity",
position = position_dodge()) +
geom_linerange(aes(ymin = m_rate-se_rate, ymax = m_rate+se_rate),
position = position_dodge(width = .9)) +
facet_wrap(~ratio)
cat_sub_avg %>%
filter(roi == "lo") %>%
ggplot(aes(x = class_size, y = m_rate, fill = resp_type)) +
geom_bar(stat = "identity",
position = position_dodge()) +
geom_linerange(aes(ymin = m_rate-se_rate, ymax = m_rate+se_rate),
position = position_dodge(width = .9)) +
facet_wrap(~ratio)
View(cat_sub_avg)
cat_sub_avg %>%
filter(roi == "lo") %>%
ggplot(aes(x = class_size, y = m_rate, fill = resp_type)) +
geom_bar(stat = "identity",
position = position_dodge()) +
geom_linerange(aes(ymin = m_rate-se_rate, ymax = m_rate+se_rate),
position = position_dodge(width = .9)) +
facet_wrap(class_size~ratio)
cat_sub_avg %>%
filter(roi == "lo") %>%
ggplot(aes(x = class_size, y = m_rate, fill = resp_type)) +
geom_bar(stat = "identity",
position = position_dodge()) +
geom_linerange(aes(ymin = m_rate-se_rate, ymax = m_rate+se_rate),
position = position_dodge(width = .9)) +
facet_wrap(timing~ratio)
cat_sub_avg %>%
filter(roi == "lo") %>%
ggplot(aes(x = class_size, y = m_rate, fill = resp_type)) +
geom_bar(stat = "identity",
position = position_dodge()) +
geom_linerange(aes(ymin = m_rate-se_rate, ymax = m_rate+se_rate),
position = position_dodge(width = .9)) +
facet_wrap(timing~ratio)
# Calculating the decoding accuracy across all conditions
cat_acc_avg <- cat_acc %>%
group_by(ratio) %>%
summarize(gm_acc = mean(m_acc),
se_acc = se(m_acc),
.groups = "keep")
cat_acc_avg %>%
ggplot(aes(x = ratio, y = gm_acc, color = timing)) +
geom_pointrange(aes(ymin = gm_acc-se_acc, ymax = gm_acc+se_acc)) +
geom_line(aes(group = timing)) +
labs(title = "Classification Accuracy when Decoding Categories") +
ylim(c(.5,.8))
cat_acc_avg %>%
ggplot(aes(x = ratio, y = gm_acc)) +
geom_pointrange(aes(ymin = gm_acc-se_acc, ymax = gm_acc+se_acc)) +
geom_line() +
labs(title = "Classification Accuracy when Decoding Categories") +
ylim(c(.5,.8))
cat_acc_avg %>%
ggplot(aes(x = ratio, y = gm_acc)) +
geom_pointrange(aes(ymin = gm_acc-se_acc, ymax = gm_acc+se_acc)) +
geom_line() +
labs(title = "Classification Accuracy when Decoding Categories") +
ylim(c(.5,.8))
View(cat_acc_avg)
View(cat_acc_avg)
cat_acc_avg %>%
ggplot(aes(x = ratio, y = gm_acc)) +
geom_pointrange(aes(ymin = gm_acc-se_acc, ymax = gm_acc+se_acc)) +
geom_line() +
labs(title = "Classification Accuracy when Decoding Categories") +
ylim(c(.5,.8))
cat_acc_avg %>%
ggplot(aes(x = ratio, y = gm_acc)) +
geom_pointrange(aes(ymin = gm_acc-se_acc, ymax = gm_acc+se_acc)) +
#geom_line() +
labs(title = "Classification Accuracy when Decoding Categories") +
ylim(c(.5,.8))
cat_acc_avg %>%
mutate(group = 1) %>%
ggplot(aes(x = ratio, y = gm_acc)) +
geom_pointrange(aes(ymin = gm_acc-se_acc, ymax = gm_acc+se_acc)) +
geom_line(aes(group = group)) +
labs(title = "Classification Accuracy when Decoding Categories") +
ylim(c(.5,.8))
catw <- rio::import("models/decodeWCat_results.rds")
# Calculating the average decoding accuracy for each condition
cat_acc <- cat %>%
mutate(ratio = fct_relevel(ratio, ".5:.5", after = 2),
roi = fct_relevel(roi, c("lo","pfus","ipar"))) %>%
group_by(ratio, timing, roi) %>%
summarize(m_acc = mean(acc),
se_acc = se(acc),
.groups = "keep")
# Calculating the decoding accuracy across all conditions
cat_acc_avg <- cat_acc %>%
group_by(ratio) %>%
summarize(gm_acc = mean(m_acc),
se_acc = se(m_acc),
.groups = "keep")
# calculating the mean hit and fa rate for each subclass
cat_sub <- cat %>%
filter(subClass != "none") %>%
mutate(hit_sm = ifelse(subClass=="class1",
hit_class1, hit_class2),
hit_lg = ifelse(subClass=="class1",
hit_class2, hit_class1),
fa_sm = ifelse(subClass=="class1",
fa_class1, fa_class2),
fa_lg = ifelse(subClass=="class1",
fa_class2, fa_class1)) %>%
pivot_longer(cols = c(11:14),
names_to = c("resp_type","class_size"),
names_sep = "_",
values_to = "rate")
cat_sub_avg <- cat_sub %>%
group_by(ratio, timing, roi, resp_type, class_size) %>%
summarize(m_rate = mean(rate),
se_rate = se(rate),
.groups = "keep")
# Calculating the mean hit and false alarm rates for each category
cat_resp <- cat
names(cat_resp)[7:10] <- c("oaniaml_panimal","otool_ptool","otool_panimal","oanimal_ptool")
View(cat_resp)
cat_resp <- cat_resp %>%
mutate(subClass = ifelse(subClass == "class1",
"animal", ifelse(subClass == "class2",
"tool", "none")))
View(cat_sub_avg)
cat_sub <- cat_sub %>%
group_by(ratio, timing, roi, resp_type, class_size) %>%
summarize(m_rate = mean(rate),
se_rate = se(rate),
.groups = "keep")
cat_sub %>%
filter(roi == "lo") %>%
ggplot(aes(x = class_size, y = m_rate, fill = resp_type)) +
geom_bar(stat = "identity",
position = position_dodge()) +
geom_linerange(aes(ymin = m_rate-se_rate, ymax = m_rate+se_rate),
position = position_dodge(width = .9)) +
facet_wrap(timing~ratio)
View(cat_sub_avg)
# # calculating the mean hit and fa rate for each subclass across conditions
cat_sub_avg <- cat_sub %>%
group_by(ratio, resp_type, class_size) %>%
summarize(se_rate = se(m_rate),
m_rate = mean(m_rate))
# # calculating the mean hit and fa rate for each subclass across conditions
cat_sub_avg <- cat_sub %>%
group_by(ratio, resp_type, class_size) %>%
summarize(se_rate = se(m_rate),
m_rate = mean(m_rate),
.groups = "keep")
View(cat_sub_avg)
View(cat_sub_avg)
cat_acc %>%
filter(roi == "lo") %>%
ggplot(aes(x = ratio, y = m_acc, color = timing)) +
geom_pointrange(aes(ymin = m_acc-se_acc, ymax = m_acc+se_acc)) +
geom_line(aes(group = timing)) +
labs(title = "Classification Accuracy when Decoding Categories") +
ylim(c(.5,.8))
cat_acc %>%
filter(roi == "pfus") %>%
ggplot(aes(x = ratio, y = m_acc, color = timing)) +
geom_pointrange(aes(ymin = m_acc-se_acc, ymax = m_acc+se_acc)) +
geom_line(aes(group = timing)) +
labs(title = "Classification Accuracy when Decoding Categories") +
ylim(c(.5,.8))
cat_acc %>%
filter(roi == "ipar") %>%
ggplot(aes(x = ratio, y = m_acc, color = timing)) +
geom_pointrange(aes(ymin = m_acc-se_acc, ymax = m_acc+se_acc)) +
geom_line(aes(group = timing)) +
labs(title = "Classification Accuracy when Decoding Categories") +
ylim(c(.45,.8))
cat_acc_avg %>%
mutate(group = 1) %>%
ggplot(aes(x = ratio, y = gm_acc)) +
geom_pointrange(aes(ymin = gm_acc-se_acc, ymax = gm_acc+se_acc)) +
geom_line(aes(group = group)) +
labs(title = "Classification Accuracy when Decoding Categories") +
ylim(c(.5,.8))
cat_sub_avg %>%
ggplot(aes(x = class_size, y = m_rate, fill = resp_type)) +
geom_bar(stat = "identity",
position = position_dodge(width = .9))
cat_sub_avg %>%
ggplot(aes(x = class_size, y = m_rate, fill = resp_type)) +
geom_bar(stat = "identity",
position = position_dodge(width = .9)) +
geom_linerange(aes(ymin = m_rate-se_rate, ymax = m_rate+se_rate),
position = position_dodge(width = .9)) +
facet_wrap(~ration)
cat_sub_avg %>%
ggplot(aes(x = class_size, y = m_rate, fill = resp_type)) +
geom_bar(stat = "identity",
position = position_dodge(width = .9)) +
geom_linerange(aes(ymin = m_rate-se_rate, ymax = m_rate+se_rate),
position = position_dodge(width = .9)) +
facet_wrap(~ratio)
cat_bal <- cat %>%
filter(subClass == "none")
View(cat_bal)
cat_bal <- cat %>%
filter(subClass == "none") %>%
rowwise() %>%
mutate(hit_rate = mean(hit_class1, hit_class2),
fa_rate = mean(fa_class1, fa_class2))
cat_bal <- cat %>%
filter(subClass == "none") %>%
rowwise() %>%
mutate(hit_rate = mean(c(hit_class1, hit_class2)),
fa_rate = mean(c(fa_class1, fa_class2)))
View(cat_bal)
# calculating the mean hit and fa rate for balanced classes
cat_bal <- cat %>%
filter(subClass == "none") %>%
rowwise() %>%
mutate(hit_rate = mean(c(hit_class1, hit_class2)),
fa_rate = mean(c(fa_class1, fa_class2))) %>%
pivot_longer(cols = c(11:12),
names_to = "resp_type",
values_to = "rate") %>%
group_by(ratio, timing, roi, resp_type) %>%
summarize(m_rate = mean(rate),
se_rate = se(rate),
.groups = "keep")
cat_bal_avg <- cat_bal %>%
group_by(ratio, resp_type) %>%
summarize(se_rate = se(m_rate),
m_rate = mean(m_rate),
.groups = "keep")
View(cat_bal_avg)
par(mfrow = c(1,2))
cat_bal_avg %>%
ggplot(aes(x = resp_type, y = m_rate, fill = resp_type)) +
geom_bar(stat = "identity") +
geom_linerange(aes(ymin = m_rate-se_rate, ymax = m_rate+se_rate)) +
facet_wrap(~ratio)
cat_sub_avg %>%
ggplot(aes(x = class_size, y = m_rate, fill = resp_type)) +
geom_bar(stat = "identity",
position = position_dodge(width = .9)) +
geom_linerange(aes(ymin = m_rate-se_rate, ymax = m_rate+se_rate),
position = position_dodge(width = .9)) +
facet_wrap(~ratio)
par(mfrow = c(1,2))
cat_bal_avg %>%
ggplot(aes(x = resp_type, y = m_rate, fill = resp_type)) +
geom_bar(stat = "identity") +
geom_linerange(aes(ymin = m_rate-se_rate, ymax = m_rate+se_rate)) +
facet_wrap(~ratio)
cat_sub_avg %>%
ggplot(aes(x = class_size, y = m_rate, fill = resp_type)) +
geom_bar(stat = "identity",
position = position_dodge(width = .9)) +
geom_linerange(aes(ymin = m_rate-se_rate, ymax = m_rate+se_rate),
position = position_dodge(width = .9)) +
facet_wrap(~ratio)
